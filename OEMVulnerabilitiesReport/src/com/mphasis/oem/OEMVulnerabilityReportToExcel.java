package com.mphasis.oem;

import java.io.File;
import java.io.FileOutputStream;
import java.net.URLEncoder;

import org.apache.poi.common.usermodel.HyperlinkType;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Hyperlink;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class OEMVulnerabilityReportToExcel {

	private static boolean checkIfRowIsEmpty(XSSFRow row) {
		if (row == null || row.getLastCellNum() <= 0) {
			return true;
		}
		Cell cell = row.getCell((int) row.getFirstCellNum());
		if (cell == null || "".equals(cell.getRichStringCellValue().getString())) {
			return true;
		}
		return false;
	}

	private static void addHyperLink(XSSFWorkbook workbook, Cell cell, String url) {

		// every time new instance of create helper is created --- use spring insted
		CreationHelper createHelper = workbook.getCreationHelper();
		CellStyle hlink_style = workbook.createCellStyle();
		Font hlink_font = workbook.createFont();
		hlink_font.setUnderline(Font.U_SINGLE);
		hlink_font.setColor(Font.COLOR_NORMAL);
		hlink_style.setFont(hlink_font);
		Hyperlink link = createHelper.createHyperlink(HyperlinkType.URL);
		link.setAddress(url);
		cell.setHyperlink(link);
		cell.setCellStyle(hlink_style);

	}

	public static void main(String[] args) throws Exception {

		// Create blank workbook
		XSSFWorkbook workbook = new XSSFWorkbook();

		// Create a blank sheet
		XSSFSheet spreadsheet = workbook.createSheet("OEM_Vulnerabilities");

		// Create row object
		XSSFRow row;

		int rowid = 0;

		// Document doc =
		// Jsoup.connect("https://www.us-cert.gov/ncas/bulletins/sb20-048").get();

		Document doc1 = Jsoup.connect("https://www.us-cert.gov/ncas/bulletins").get();

		StringBuffer sb = new StringBuffer("https://www.us-cert.gov");

		String attrt = doc1.getElementsByClass("item-list").first().getElementsByTag("a").first().attr("href");

		sb.append(attrt);

		System.out.println(sb.toString());

		Document doc = Jsoup.connect(sb.toString()).get();

		Element highVElement = doc.getElementById("high_v");
		Element mediumVElement = doc.getElementById("medium_v");
		Element lowVElement = doc.getElementById("low_v");
		Element snyaVElement = doc.getElementById("snya_v");

		Elements trElementsInHighV = highVElement.getElementsByTag("tr");

		boolean isTdElement = false;

		for (Element trElem : trElementsInHighV) {

			row = spreadsheet.createRow(rowid++);

			Elements thElementsInHighV = trElem.getElementsByTag("th");
			int cellid = 0;
			int headerCount = 0;
			for (Element thElem : thElementsInHighV) {
				headerCount++;
				
				String linkText = thElem.text();
				if (headerCount == 1) {
					String[] primaryVendorProduct = linkText.split("--");
					for(String primaryVendorProductHeader : primaryVendorProduct) {
						Cell cell = row.createCell(cellid++);
						cell.setCellValue(primaryVendorProductHeader);
					}
				}else {
					Cell cell = row.createCell(cellid++);
					cell.setCellValue(thElem.text());
				}

				if (headerCount == 4) {
					Cell severityCell = row.createCell(cellid++);
					severityCell.setCellValue("Severity");
				}

			}

			Elements tdElementsInHighV = trElem.getElementsByTag("td");

			if (tdElementsInHighV.size() > 0) {

				for (int i = 0; i < tdElementsInHighV.size(); i++) {
					Cell cell = row.createCell(cellid++);
					String cellValue = tdElementsInHighV.get(i).text();
					cell.setCellValue(cellValue);
					
					if (i == 0) {
						String[] vendorAndProduct = cellValue.split("--");
						cell.setCellValue(vendorAndProduct[0]);
						Cell productCell = row.createCell(cellid++);
						productCell.setCellValue(vendorAndProduct[1]);
					}
					
					if (i == 3) {
						Cell cVssScoreCell = row.createCell(cellid++);
						String cVssScore = tdElementsInHighV.get(i).text();
						try {
							double cVssScoreValue = Double.parseDouble(cVssScore);
							String cVssScoreCellValue = (cVssScoreValue >= 7.0) ? "High"
									: (cVssScoreValue >= 4.0) ? "Medium" : "Low";
							cVssScoreCell.setCellValue(cVssScoreCellValue);
							cell.setCellValue(cVssScoreValue);
						} catch (NumberFormatException e) {
							cell.setCellValue(cVssScore);
							cVssScoreCell.setCellValue("YTBA");
						}
						Elements anchorTagElementsInThirdTdTag = tdElementsInHighV.get(i).getElementsByTag("a");
						if (anchorTagElementsInThirdTdTag.size() > 0) {
							String href = anchorTagElementsInThirdTdTag.first().attr("href");
							href = URLEncoder.encode(href, "UTF-8");
							addHyperLink(workbook, cell, href);
						}
					}

					if (i == 4) {
						Elements anchorTagElementsInFourthTdTag = tdElementsInHighV.get(i).getElementsByTag("a");
						for (int j = 0; j < anchorTagElementsInFourthTdTag.size(); j++) {
							String textValue = anchorTagElementsInFourthTdTag.get(j).text();
							if (textValue.contains("CVE")) {
								cell.setCellValue(textValue);
								String href = anchorTagElementsInFourthTdTag.get(j).attr("href");
								href = URLEncoder.encode(href, "UTF-8");
								addHyperLink(workbook, cell, href);
								break;
							}
						}
					}
				}

			}

		}

		Elements trElementsInMediumV = mediumVElement.getElementsByTag("tr");

		for (Element trElem : trElementsInMediumV) {

			row = spreadsheet.createRow(rowid++);

			int cellid = 0;

			Elements tdElementsInMediumV = trElem.getElementsByTag("td");

			if (tdElementsInMediumV.size() > 0) {

				for (int i = 0; i < tdElementsInMediumV.size(); i++) {
					Cell cell = row.createCell(cellid++);
					String cellValue = tdElementsInMediumV.get(i).text();
					cell.setCellValue(cellValue);
					
					if (i == 0) {
						String[] vendorAndProduct = cellValue.split("--");
						cell.setCellValue(vendorAndProduct[0]);
						Cell productCell = row.createCell(cellid++);
						productCell.setCellValue(vendorAndProduct[1]);
					}
					
					if (i == 3) {
						Cell cVssScoreCell = row.createCell(cellid++);
						String cVssScore = tdElementsInMediumV.get(i).text();
						try {
							double cVssScoreValue = Double.parseDouble(cVssScore);
							String cVssScoreCellValue = (cVssScoreValue >= 7.0) ? "High"
									: (cVssScoreValue >= 4.0) ? "Medium" : "Low";
							cVssScoreCell.setCellValue(cVssScoreCellValue);
							cell.setCellValue(cVssScoreValue);
						} catch (NumberFormatException e) {
							cell.setCellValue(cVssScore);
							cVssScoreCell.setCellValue("YTBA");
						}
						Elements anchorTagElementsInThirdTdTag = tdElementsInMediumV.get(i).getElementsByTag("a");
						if (anchorTagElementsInThirdTdTag.size() > 0) {
							String href = anchorTagElementsInThirdTdTag.first().attr("href");
							href = URLEncoder.encode(href, "UTF-8");
							addHyperLink(workbook, cell, href);
						}
					}

					if (i == 4) {
						Elements anchorTagElementsInFourthTdTag = tdElementsInMediumV.get(i).getElementsByTag("a");
						for (int j = 0; j < anchorTagElementsInFourthTdTag.size(); j++) {
							String textValue = anchorTagElementsInFourthTdTag.get(j).text();
							if (textValue.contains("CVE")) {
								cell.setCellValue(textValue);
								String href = anchorTagElementsInFourthTdTag.get(j).attr("href");
								href = URLEncoder.encode(href, "UTF-8");
								addHyperLink(workbook, cell, href);
								break;
							}
						}
					}
				}
			}

		}

		Elements trElementsInLowV = lowVElement.getElementsByTag("tr");
		for (Element trElem : trElementsInLowV) {
			row = spreadsheet.createRow(rowid++);

			int cellid = 0;

			Elements tdElementsInLowV = trElem.getElementsByTag("td");
			if (tdElementsInLowV.size() > 0) {

				for (int i = 0; i < tdElementsInLowV.size(); i++) {
					Cell cell = row.createCell(cellid++);
					String cellValue = tdElementsInLowV.get(i).text();
					cell.setCellValue(cellValue);
					
					if (i == 0) {
						String[] vendorAndProduct = cellValue.split("--");
						cell.setCellValue(vendorAndProduct[0]);
						Cell productCell = row.createCell(cellid++);
						productCell.setCellValue(vendorAndProduct[1]);
					}
					
					if (i == 3) {
						Cell cVssScoreCell = row.createCell(cellid++);
						String cVssScore = tdElementsInLowV.get(i).text();
						try {
							double cVssScoreValue = Double.parseDouble(cVssScore);
							String cVssScoreCellValue = (cVssScoreValue >= 7.0) ? "High"
									: (cVssScoreValue >= 4.0) ? "Medium" : "Low";
							cVssScoreCell.setCellValue(cVssScoreCellValue);
							cell.setCellValue(cVssScoreValue);
						} catch (NumberFormatException e) {
							cell.setCellValue(cVssScore);
							cVssScoreCell.setCellValue("YTBA");
						}
						Elements anchorTagElementsInThirdTdTag = tdElementsInLowV.get(i).getElementsByTag("a");
						if (anchorTagElementsInThirdTdTag.size() > 0) {
							String href = anchorTagElementsInThirdTdTag.first().attr("href");
							href = URLEncoder.encode(href, "UTF-8");
							addHyperLink(workbook, cell, href);
						}
					}

					if (i == 4) {
						Elements anchorTagElementsInFourthTdTag = tdElementsInLowV.get(i).getElementsByTag("a");
						for (int j = 0; j < anchorTagElementsInFourthTdTag.size(); j++) {
							String textValue = anchorTagElementsInFourthTdTag.get(j).text();
							if (textValue.contains("CVE")) {
								cell.setCellValue(textValue);
								String href = anchorTagElementsInFourthTdTag.get(j).attr("href");
								href = URLEncoder.encode(href, "UTF-8");
								addHyperLink(workbook, cell, href);
								break;
							}
						}
					}
				}

			}
		}

		Elements trElementsInSnyaV = snyaVElement.getElementsByTag("tr");
		for (Element trElem : trElementsInSnyaV) {
			row = spreadsheet.createRow(rowid++);

			int cellid = 0;

			Elements tdElementsInSnyaV = trElem.getElementsByTag("td");
			if (tdElementsInSnyaV.size() > 0) {

				for (int i = 0; i < tdElementsInSnyaV.size(); i++) {
					Cell cell = row.createCell(cellid++);
					String cellValue = tdElementsInSnyaV.get(i).text();
					cell.setCellValue(cellValue);
					
					if (i == 0) {
						String[] vendorAndProduct = cellValue.split("--");
						cell.setCellValue(vendorAndProduct[0]);
						Cell productCell = row.createCell(cellid++);
						productCell.setCellValue(vendorAndProduct[1]);
					}
					
					if (i == 3) {
						Cell cVssScoreCell = row.createCell(cellid++);
						String cVssScore = tdElementsInSnyaV.get(i).text();
						try {
							double cVssScoreValue = Double.parseDouble(cVssScore);
							String cVssScoreCellValue = (cVssScoreValue >= 7.0) ? "High"
									: (cVssScoreValue >= 4.0) ? "Medium" : "Low";
							cVssScoreCell.setCellValue(cVssScoreCellValue);
							cell.setCellValue(cVssScoreValue);
						} catch (NumberFormatException e) {
							cell.setCellValue(cVssScore);
							cVssScoreCell.setCellValue("YTBA");
						}
						Elements anchorTagElementsInThirdTdTag = tdElementsInSnyaV.get(i).getElementsByTag("a");
						if (anchorTagElementsInThirdTdTag.size() > 0) {
							String href = anchorTagElementsInThirdTdTag.first().attr("href");
							href = URLEncoder.encode(href, "UTF-8");
							addHyperLink(workbook, cell, href);
						}
					}

					if (i == 4) {
						Elements anchorTagElementsInFourthTdTag = tdElementsInSnyaV.get(i).getElementsByTag("a");
						for (int j = 0; j < anchorTagElementsInFourthTdTag.size(); j++) {
							String textValue = anchorTagElementsInFourthTdTag.get(j).text();
							if (textValue.contains("CVE")) {
								cell.setCellValue(textValue);
								String href = anchorTagElementsInFourthTdTag.get(j).attr("href");
								href = URLEncoder.encode(href, "UTF-8");
								addHyperLink(workbook, cell, href);
								break;
							}
						}
					}
				}

			}
		}

		for (int i = 0; i < spreadsheet.getLastRowNum(); i++) {
			if (checkIfRowIsEmpty(spreadsheet.getRow(i))) {
				spreadsheet.shiftRows(i + 1, spreadsheet.getLastRowNum(), -1);
				i--;
			}
		}

		// Write the workbook in file system
		FileOutputStream out = new FileOutputStream(new File("D:/OEM_Vulnerabilities.xlsx"));

		workbook.write(out);
		out.close();
		System.out.println("Writesheet.xlsx written successfully");

	}

}